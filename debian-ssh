debian-ssh, based from the article at http://web.archive.org/web/20110723091928/http://digitaloffense.net/tools/debian-openssl/

Our tools:
http://web.archive.org/web/20110723091928/http://metasploit.com/users/hdm/tools/getpid-preload.tar.gz
http://web.archive.org/web/20110723091928/http://digitaloffense.net/tools/debian-openssl/ubunturoot.tar.bz2
http://web.archive.org/web/20110723091928/http://metasploit.com/users/hdm/tools/debian-openssl/dokeygen.sh
Common Keys:
http://web.archive.org/web/20110723091928/http://digitaloffense.net/tools/debian-openssl/debian_ssh_dsa_1024_x86.tar.bz2
http://web.archive.org/web/20110723091928/http://digitaloffense.net/tools/debian-openssl/debian_ssh_rsa_2048_x86.tar.bz2
Uncommon Keys:
http://web.archive.org/web/20110723091928/http://digitaloffense.net/tools/debian-openssl/debian_ssh_rsa_1023_x86.tar.bz2
http://web.archive.org/web/20110723091928/http://digitaloffense.net/tools/debian-openssl/debian_ssh_rsa_1024_x86.tar.bz2
http://web.archive.org/web/20110723091928/http://digitaloffense.net/tools/debian-openssl/debian_ssh_rsa_2047_x86.tar.bz2
http://web.archive.org/web/20110723091928/http://digitaloffense.net/tools/debian-openssl/debian_ssh_rsa_4096_x86.tar.bz2
http://web.archive.org/web/20110723091928/http://digitaloffense.net/tools/debian-openssl/debian_ssh_rsa_8192_1_4100_x86.tar.bz2
http://web.archive.org/web/20110723091928/http://digitaloffense.net/tools/debian-openssl/debian_ssh_rsa1_x86.tar.bz

The Toys
The blacklists published by Debian and Ubuntu demonstrate just how small the key space is. When creating a new OpenSSH key, there are only 32,767 possible outcomes for a given architecture, key size, and key type. The reason is that the only "random" data being used by the PRNG is the ID of the process. In order to generate the actual keys that match these blacklists, we need a system containing the correct binaries for the target platform and a way to generate keys with a specific process ID. To solve the process ID issue, I wrote a shared library that could be preloaded and that returns a user-specified value for the getpid() libc call. 

The next step was to build a chroot environment that contained the actual binaries and libraries from a vulnerable system. I took a snapshot from a Ubuntu system on the local network. You can find the entire chroot environment here In order to generate an OpenSSH key with a specific type, bit count, and process ID, I wrote a shell script that could be executed from within the chroot environment. You can find this shell script here. This script is placed into the root directory of the extracted Ubuntu filesystem. In order to generate a key, this script is called with the following command line:
# chroot ubunturoot /dokeygen.sh 1 -t dsa -b 1024 -f /tmp/dsa_1024_1
This will generate a new OpenSSH 1024-bit DSA key with the value of getpid() always returning the number "1". We now have our first pre-generated SSH key. If we continue this process for all PIDs up to 32,767 and then repeat it for 2048-bit RSA keys, we have covered the valid key ranges for x86 systems running the buggy version of the OpenSSL library. With this key set, we can compromise any user account that has a vulnerable key listed in the authorized_keys file. This key set is also useful for decrypting a previously-captured SSH session, if the SSH server was using a vulnerable host key. Links to the pregenerated key sets for 1024-bit DSA and 2048-bit RSA keys (x86) are provided in the downloads section below.

The interesting thing about these keys is how they are tied to the process ID. Since most Debian-based systems use sequential process ID values (incrementing from system boot and wrapping back around as needed), the process ID of a given key can also indicate how soon from the system boot that key was generated. If we look at the inverse of that, we can determine which keys to use during a brute force based on the target we are attacking. When attempting to guess a key generated at boot time (like a SSH host key), those keys with PID values less than 200 would be the best choices for a brute force. When attacking a user-generated key, we can assume that most of the valid user keys were created with a process ID greater than 500 and less than 10,000. This optimization can significantly speed up a brute force attack on a remote user account over the SSH protocol.

In the near future, this site will be updated to include a brute force tool that can be used quickly gain access to any SSH account that allows public key authentication using a vulnerable key. The keys in the data files below use the following naming convention:
 / Algorithm / Bits / Fingerprint-ProcessID
   and
 / Algorithm / Bits / Fingerprint-ProcessID.pub  
To obtain the private key file for any given public key, you need to know the key fingerprint. The easiest way to obtain this fingerprint is through the following command:
 $ ssh-keygen -l -f targetkey.pub
 2048 c6:7b:14:fa:ae:b6:89:e6:67:17:ee:04:17:b0:ec:4e targetkey.pub
If we look at the public key in an editor, we can also infer that the key type is RSA. In order to locate the private key for this public key, we need to extract the data files, and look for a file named:
 rsa/2048/c67b14faaeb689e66717ee0417b0ec4e-26670
In the example above, the fingerprint is represented in hexadecimal with the colons removed, and the process ID is indicated as "26670". If we want to authenticate to a vulnerable system that uses this public key for authentication, we would run the following command:
 $ ssh -i rsa/2048/c67b14faaeb689e66717ee0417b0ec4e-26670 root@targetmachine
